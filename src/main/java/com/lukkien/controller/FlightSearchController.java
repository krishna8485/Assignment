package com.lukkien.controller;
import com.lukkien.Exception.NotFoundException;
import com.lukkien.model.AiportsResponse;
import com.lukkien.model.Airport;
import com.lukkien.model.SearchResult;
import com.lukkien.model.SearchResultsResponse;
import com.lukkien.service.FlightService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.web.servlet.ModelAndView;

import java.util.Date;
import java.util.List;
import java.util.concurrent.atomic.AtomicLong;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@Controller
public class FlightSearchController {

    @Autowired
    FlightService flightServiceImpl;

    private static final Logger logger = LogManager.getLogger(FlightSearchController.class);


    @RequestMapping(value = "/addFlights", method = RequestMethod.POST)
    public ResponseEntity<SearchResult> addFlight(@RequestBody
                                                 Airport origin, Airport destination) {
       logger.info("addFlights");
        return new ResponseEntity<>(HttpStatus.CREATED);
    }
    @RequestMapping(value = "/addFlights", method = RequestMethod.POST)
    public ResponseEntity<SearchResult> addFlight(@RequestBody SearchResult searchResult) {
        logger.info("addFlight" + searchResult.toString());
        return new ResponseEntity<>(searchResult, HttpStatus.CREATED);
    }
    /**
     *
     * @param origin
     * @param destination
     * @return
     * @throws NotFoundException
     */
    @RequestMapping(value ="/getResults" , method = RequestMethod.GET)
    public @ResponseBody
    ResponseEntity<SearchResultsResponse> getResults(@RequestParam("origin")
                                                 String origin, @RequestParam("destination")
            String destination) throws NotFoundException {
        logger.info("info flight search executed" + origin +" " +destination);
        List<SearchResult> flightsResults = flightServiceImpl.findFlights(origin, destination);
        logger.info("flightResultsDTo "+ flightsResults.toString());
        if (flightsResults.size() >0 ){
            SearchResultsResponse searchResultsResponse = new SearchResultsResponse
                    (new Date (), "","", flightsResults);
            logger.info("info flight results are more" );
            return new ResponseEntity<>(searchResultsResponse, HttpStatus.OK);
        } else {
            throw new NotFoundException("No Data");
        }
    }

    /**
     *
     * @param queryString
     * @return
     * @throws NotFoundException
     */
    @RequestMapping(value ="/getAirportLists" , method = {RequestMethod.GET, RequestMethod.POST})
    public @ResponseBody
    ResponseEntity<AiportsResponse> getAirportLists(@RequestParam(name="query", required=true) String queryString) throws NotFoundException {
        logger.info("info getAirportNames executed" +queryString);
        List<Airport> airportList= flightServiceImpl.findAirports(queryString);
        AiportsResponse jsonResponse = new AiportsResponse(new Date (), "","", airportList);
        if (airportList.size() >0 ){
            logger.info("info getAirportNames are more" );
            return new ResponseEntity<>(jsonResponse, HttpStatus.OK);
        } else {
            throw new NotFoundException("No Data");
        }
    }

    /**
     *
     * @return
     */
    @RequestMapping("/welcome")
    public ModelAndView homePage() {
        return new ModelAndView("FlightSearch");
    }

}